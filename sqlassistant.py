# -*- coding: utf-8 -*-
"""SQLAssistant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17o-T3EMAMzGOnovHvPzPsTfkXGCAesYR

LLM to automate workflow SQL queries
CSE-590-52-4255: SPECIAL TOPICS - CECS-Summer 2025
Student: Gaudencio Galarza
Student ID: 5536292
"""

!pip install langchain openai sqlalchemy pandas

import pandas as pd
import sqlite3

# Load CSV
df = pd.read_csv('sales_data.csv')
print("Preview of the data:")
display(df.head())

# Convert to datetime
df["Sale_Date"] = pd.to_datetime(df["Sale_Date"])

# Overwrite the DB
conn = sqlite3.connect("sales.db")
df.to_sql("sales", conn, if_exists="replace", index=False)
conn.commit()

# Filter to only products matching id 1052
filtered_df = df[df['Product_ID'] == 1052]

filtered_df
# we can see 2 product fall between 07-09 mths, and 5 products in the last quarter

# How many times product 1052 appeared in data
filtered_df['Product_ID'].count()

# Sum of sales, total at all time
filtered_df['Sales_Amount'].sum()

print(df[df['Product_ID'] == 1052])

!pip install -U langchain-community

from langchain.agents import create_sql_agent
from langchain.agents.agent_toolkits import SQLDatabaseToolkit
from langchain.sql_database import SQLDatabase
from langchain.chat_models import ChatOpenAI
import os

# Get API via request
import getpass
os.environ["OPENAI_API_KEY"] = getpass.getpass("Enter your OpenAI API key: ")

# Connect to the SQLite DB
db = SQLDatabase.from_uri("sqlite:///sales.db")

# Use GPT-3.5
llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)

# Build SQL agent
toolkit = SQLDatabaseToolkit(db=db, llm=llm)
agent_executor = create_sql_agent(
    llm=llm,
    toolkit=toolkit,
    verbose=True
)

# Question 1
query = "What are the total sales for product 1052 last quarter?"
response = agent_executor.run(query)
print(response)

#Checking type
df.dtypes

# Re-attemtping Example question 1 with hint this time
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
but it should be interpreted as a DATE in YYYY-MM-DD format.
Use DATE or datetime functions when filtering or comparing dates.
"""

query = schema_hint + "What are the total sales for product 1052 last quarter?"
response = agent_executor.run(query)

# Re-attemtping Example question 1 with hint specific to the range of dates available
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "What are the total sales for product 1052 last quarter?"
response = agent_executor.run(query)

# Define the date range
start_date = '2023-10-01'
end_date = '2023-12-31'

# Filter by date range
date_range_filtered_df = filtered_df[
    (filtered_df['Sale_Date'] >= start_date) &
    (filtered_df['Sale_Date'] <= end_date)
]

date_range_filtered_df['Sales_Amount'].sum()

#  Example question 2 with hint specific to the range of dates available
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "What were the  total sales for product 1052?"
response = agent_executor.run(query)

df[df["Product_ID"] == 1052]["Sales_Amount"].sum()

#  Example question 3 with hint specific to the range of dates available
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "What is the average discount given to new vs returning customers?"
response = agent_executor.run(query)

df.groupby("Customer_Type")["Discount"].mean()

#  Example question 4 with hint specific to the range of dates available
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "What are the total monthly sales from January to December 2023?"
response = agent_executor.run(query)

df_2023 = df[df["Sale_Date"].dt.year == 2023]
df_2023.groupby(df_2023["Sale_Date"].dt.to_period("M"))["Sales_Amount"].sum().sort_index()

#Testing one more since output was almost correct, but incorrect December:
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "Show me only the SQL for: What are the total monthly sales from January to December 2023?"
response = agent_executor.run(query)
# Still gives incorrect output

#Testing second time since December is still incorrect, but this time telling it to run SQL:
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "Write a SQL query that sums Sales_Amount per month from January 2023 to December 2023."
response = agent_executor.run(query)

#  Example question 5 with hint specific to the range of dates available
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "Which sales rep had the highest total sales?"
response = agent_executor.run(query)

df.groupby("Sales_Rep")["Sales_Amount"].sum().sort_values(ascending=False).head(1)

#  Example question 6 with hint specific to the range of dates available
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "Which region sold the most units?"
response = agent_executor.run(query)

df.groupby("Region")["Quantity_Sold"].sum().sort_values(ascending=False).head(1)

#  Example question 7 with hint specific to the range of dates available
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "What is the average unit price for each product category?"
response = agent_executor.run(query)

df.groupby("Product_Category")["Unit_Price"].mean()

#  Example question 8 with hint specific to the range of dates available
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "What was the total revenue per quarter in 2023?"
response = agent_executor.run(query)

df_2023 = df[df["Sale_Date"].dt.year == 2023]
df_2023.groupby(df_2023["Sale_Date"].dt.to_period("Q"))["Sales_Amount"].sum()

#  Example question 9 with hint specific to the range of dates available
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "How many sales were made using each payment method?"
response = agent_executor.run(query)

df["Payment_Method"].value_counts()

#  Example question 10 with hint specific to the range of dates available
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "What is the average discount offered by each sales channel?"
response = agent_executor.run(query)

df.groupby("Sales_Channel")["Discount"].mean()

#  Example question 11a with hint specific to the range of dates available
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "How did the sales for product 1052 change month by month?"
response = agent_executor.run(query)

df_1052 = df[df["Product_ID"] == 1052]
df_1052.groupby(df_1052["Sale_Date"].dt.to_period("M"))["Sales_Amount"].sum()

#  Example question 11b with hint specific to the range of dates available, reworded from 11a
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "Show the monthly total revenue for product 1052 from Jan to Dec 2023."
response = agent_executor.run(query)

import pandas as pd

df["Sale_Date"] = pd.to_datetime(df["Sale_Date"])  # ensure clean datetime
df_1052 = df[df["Product_ID"] == 1052]

# Check which months exist
print("🧪 Months present for product 1052:")
print(df_1052["Sale_Date"].dt.to_period("M").value_counts().sort_index())

#  Example question 12 with hint specific to the range of dates available, more complex
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "How do total sales of product 1052 compare to product 1093?"
response = agent_executor.run(query)

products = [1052, 1093]
df_filtered = df[df["Product_ID"].isin(products)]
comparison = df_filtered.groupby("Product_ID")["Sales_Amount"].sum()
print(comparison)

#  Example question 13 with hint specific to the range of dates available, more complex
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "Show monthly sales trend for product 1093 throughout 2023."
response = agent_executor.run(query)

df_1093 = df[(df["Product_ID"] == 1093) & (df["Sale_Date"].dt.year == 2023)]
trend = df_1093.groupby(df_1093["Sale_Date"].dt.to_period("M"))["Sales_Amount"].sum()
print(trend)

#  Example question 14 with hint specific to the range of dates available, more complex
schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "Which product category has the highest average unit price?"
response = agent_executor.run(query)

avg_price_by_category = df.groupby("Product_Category")["Unit_Price"].mean().sort_values(ascending=False)
print(avg_price_by_category.head(1))

schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "What are the total sales grouped by discount tiers (e.g. 0–10%, 10–20%, 20%+)?"
response = agent_executor.run(query)

def discount_tier(d):
    if d < 0.10:
        return "0–10%"
    elif d < 0.20:
        return "10–20%"
    else:
        return "20%+"

df["Discount_Tier"] = df["Discount"].apply(discount_tier)
discount_sales = df.groupby("Discount_Tier")["Sales_Amount"].sum()
print(discount_sales)

schema_hint = """
The table 'sales' has a column called 'Sale_Date' stored as TEXT in SQLite,
The dates range from 2023-01-01 through 2024-01-01.
"""

query = schema_hint + "Which product ID has the highest average profit per unit sold?"
response = agent_executor.run(query)

df["Unit_Profit"] = df["Unit_Price"] - df["Unit_Cost"]
avg_profit = df.groupby("Product_ID")["Unit_Profit"].mean().sort_values(ascending=False)
print(avg_profit.head(1))

# CODE FROM HERE TO RUN THE ENTIRE APP

!pip install langchain openai

from langchain.agents import create_sql_agent
from langchain.agents.agent_toolkits import SQLDatabaseToolkit
from langchain.sql_database import SQLDatabase
from langchain.chat_models import ChatOpenAI
import pandas as pd
import sqlite3
import os

# For uploading CSV and user interaction
from google.colab import files
import io
import ipywidgets as widgets
from IPython.display import display

# Set OpenAI API key (hidden input)
import getpass
os.environ["OPENAI_API_KEY"] = getpass.getpass("Enter your OpenAI API key: ")

# Setup LLM
llm = ChatOpenAI(model="gpt-3.5-turbo", temperature=0)

# Upload CSV file
uploaded = files.upload()
file_name = list(uploaded.keys())[0]

# Read the file into DataFrame
df = pd.read_csv(io.BytesIO(uploaded[file_name]))

# Parse and format date column
df["Sale_Date"] = pd.to_datetime(df["Sale_Date"])

# Save to SQLite
conn = sqlite3.connect("sales.db")
df.to_sql("sales", conn, if_exists="replace", index=False)
conn.commit()

# Connect LangChain to the database
db = SQLDatabase.from_uri("sqlite:///sales.db")
toolkit = SQLDatabaseToolkit(db=db, llm=llm)
agent_executor = create_sql_agent(llm=llm, toolkit=toolkit, verbose=True)

def generate_schema_hint(df):
    date_col = next((col for col in df.columns if "date" in col.lower()), None)
    if date_col:
        min_date = df[date_col].min()
        max_date = df[date_col].max()
        return f"""
The table 'sales' has a column called '{date_col}' stored as TEXT in SQLite,
The dates range from {min_date} through {max_date}.
"""
    return ""

schema_hint = generate_schema_hint(df)
print(schema_hint)

# Input UI
text_box = widgets.Textarea(
    value="",
    placeholder="Ask a data question...",
    description="Query:",
    layout=widgets.Layout(width="80%", height="100px")
)
button = widgets.Button(description="Run Query")
output = widgets.Output()

def on_click(b):
    with output:
        output.clear_output()
        print("🔍", ask_question(text_box.value, schema_hint=schema_hint))

button.on_click(on_click)
display(text_box, button, output)